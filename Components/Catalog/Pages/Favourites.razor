@page "/ulubione"
@layout CatalogLayout
@inject IBookRepository BookRepository
@inject IFavoriteBookRepository FavoriteBookRepository
@inject IDictionaryRepository DictionaryRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

<PageTitle>Ulubione książki</PageTitle>

<div class="card shadow border-0">
    <div class="card-header bg-theme bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="h2-custom">Ulubione książki</h2>
            </div>
        </div>
    </div>

    @if (!IsAuthenticated)
    {
        <div class="alert alert-warning">
            Musisz być zalogowany, aby zobaczyć ulubione książki.
        </div>
    }
    else if (!FavoriteBooks.Any())
    {
        <div class="alert alert-info">
            Nie masz jeszcze żadnych ulubionych książek.
        </div>
    }
    else
    {
        <div class="container mt-3 pb-3">
            <div class="row g-3">
                @foreach (var book in FavoriteBooks)
                {
                    <div class="col-12 col-md-6">
                        <div class="card h-100 shadow-sm">
                            <div class="row g-0">
                                <div class="col-4 d-flex justify-content-center align-items-center">
                                    <div class="book-cover-container">
                                        @if (string.IsNullOrEmpty(book.ImageUrl))
                                        {
                                            <p class="text-muted text-center m-0">Brak okładki.</p>
                                        }
                                        else
                                        {
                                            <img src="@book.ImageUrl" alt="Okładka książki @book.Title" class="img-fluid p-2" />
                                        }
                                    </div>
                                </div>

                                <div class="col-8 d-flex flex-column justify-content-between p-3">
                                    <div class="d-flex flex-wrap justify-content-between align-items-center gap-2 mb-2">
                                        <a href="/catalog/view/@book.Id?returnUrl=/ulubione" class="btn btn-primary btn-sm">
                                            <i class="bi bi-info-square"></i> Szczegóły
                                        </a>

                                        <button class="btn btn-outline-primary btn-sm" @onclick="() => RemoveFromFavorites(book.Id)">
                                            <i class="bi bi-trash"></i> Usuń z ulubionych
                                        </button>
                                    </div>

                                    <div class="card-body p-0">
                                        <h5 class="card-title theme-font-col-pri">@book.Title</h5>
                                        <p class="card-text truncate-3-lines mb-0 theme-font-col-pri">@book.Description</p>
                                        <p class="card-text"><small class="theme-font-col-pri">@book.BookAuthor</small></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>


@code {
    private bool IsAuthenticated { get; set; }
    private string UserId { get; set; }
    private List<BookGetDto> FavoriteBooks { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("applyUserPreferences");
        }
    }

    private async Task LoadData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        IsAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (!IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        UserId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        var allBooks = await BookRepository.GetBooksAsync();
        var favorites = await FavoriteBookRepository.GetUserFavoritesAsync(UserId);
        var favoriteIds = favorites.Select(f => f.BookId).ToHashSet();

        FavoriteBooks = allBooks
            .Where(b => favoriteIds.Contains(b.Id))
            .ToList();
    }

    private async Task RemoveFromFavorites(int bookId)
    {
        await FavoriteBookRepository.RemoveFavoriteAsync(UserId, bookId);
        await LoadData();
    }
}
