@page "/koszyk"
@layout CatalogLayout
@inject ICopyRepository CopyRepository
@inject IBookRepository BookRepository
@inject IDictionaryRepository DictionaryRepository
@inject NavigationManager NavigationManager
@inject IBookReservationCartRepository BookReservationCartRepository
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

<PageTitle>Koszyk zamówień</PageTitle>

<div class="card shadow border-0">
    <div class="card-header bg-theme bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="h2-custom">Koszyk zamówień</h2>
            </div>
        </div>
    </div>

    <div class="row gx-3 p-3">
        <div class="col-12 col-lg-6 order-1 order-lg-2 mb-1 mb-lg-0">
            <div class="card p-3 shadow-sm">
                <h5 class="mb-3">Podsumowanie</h5>
                <p>Razem do wypożyczenia: @Books.Count()</p>
                <button class="btn btn-primary w-100">Wypożycz</button>
            </div>
        </div>

        <div class="col-12 col-lg-6 order-2 order-lg-1">
            @foreach (var book in Books)
            {
                <div class="card mb-1 shadow-sm">
                    <div class="row g-0">
                        <div class="col-md-4 d-flex justify-content-center align-items-center">
                            <div class="book-cover-container">
                                @if (string.IsNullOrEmpty(book.BookImageUrl))
                                {
                                    <p class="text-muted text-center m-0">Brak okładki.</p>
                                }
                                else
                                {
                                    <img src="@book.BookImageUrl" alt="Okładka książki @book.BookTitle" class="img-fluid p-2" />
                                }
                            </div>
                        </div>

                        <div class="col-md-8 d-flex flex-column justify-content-between p-3">
                            <div class="d-flex flex-wrap justify-content-end align-items-center gap-2 mb-2">
                                <div class="d-flex flex-wrap gap-2">
                                    <a href="/catalog/view/@book.Id?returnUrl=/ulubione" class="btn btn-outline-primary btn-sm">
                                        <i class="bi bi-info-square"></i> Szczegóły
                                    </a>

                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveFromCart(book.Id)">
                                        <i class="bi bi-trash"></i> Usuń z koszyka
                                    </button>
                                </div>
                            </div>

                            <div class="card-body p-0">
                                <h5 class="card-title">@book.BookTitle</h5>
                                <p class="card-text"><small class="text-body-secondary">@book.AuthorName</small></p>
                                <p class="card-text truncate-3-lines mb-0">Egzemplarz: @book.Signature</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IEnumerable<CopyGetDto> Books { get; set; } = new List<CopyGetDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("applyUserPreferences");
        }
    }


    private async Task LoadData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            // Możesz przekierować na logowanie albo pokazać pusty koszyk
            NavigationManager.NavigateTo("/login");
            return;
        }

        string userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var cartItems = await BookReservationCartRepository.GetUserCartAsync(userId);

        Books = cartItems.Select(rc => new CopyGetDto
        {
            Id = rc.BookCopy.Id,
            Signature = rc.BookCopy.Signature,
            InventoryNum = rc.BookCopy.InventoryNum,
                BookId = rc.BookCopy.BookId,
                BookTitle = rc.BookCopy.Book.Title,
                BookImageUrl = rc.BookCopy.Book.ImageUrl,
                AuthorName = rc.BookCopy.Book.BookAuthor != null
                     ? rc.BookCopy.Book.BookAuthor.Surname + ", " + rc.BookCopy.Book.BookAuthor.Name
                     : "Brak autora"
        }).ToList();
    } 
    
    private async Task RemoveFromCart(int bookCopyId)
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        string userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        await BookReservationCartRepository.RemoveFromCartAsync(bookCopyId, userId);

        // Odśwież listę po usunięciu
        await LoadData();
    }
}