@page "/bookslist/create"
@page "/bookslist/edit/{BookId:int}"

@inject IBookRepository BookRepository
@inject IDictionaryRepository DictionaryRepository
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHostEnvironment

@rendermode InteractiveServer

@if (IsLoading)
{
    <div class="position-absolute w-75  h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading-book.gif" alt="loading" />
        <p>Ładowanie...</p>
    </div>
}

else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-theme bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(BookId == 0 ? "Dodaj" : "Edytuj") książkę </h2>
                </div>
            </div>
        </div>

        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <div class="col-12 text-start">
                        <button @onclick="GoBack" class="btn btn-primary">
                            <i class="bi bi-arrow-bar-left"></i> Powrót
                        </button>
                    </div>
                </div>
            </div>

            <div class="form-custom card shadow mb-4 p-4 mx-auto">
                <div class="mb-4 px-2">
                    <EditForm Model="book" FormName="UpsertBookForm" OnValidSubmit="UpsertBookFormSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <!--Oznaczenia (tagi)-->
                        <div class="row mb-3">
                            <label class="col-sm-2 col-form-label text-end">Specjalne</label>
                            <div class="col-sm-10">
                                @foreach (var tag in SpecialTags)
                                {
                                    <div class="form-check form-check-inline">
                                        <input type="checkbox"
                                        class="form-check-input"
                                        id="tag-@tag.Id"
                                        value="@tag.Id"
                                        checked="@book.BookSpecialTagIds.Contains(tag.Id)"
                                        @onchange="@(() => ToggleSpecialTag(tag.Id))" />
                                        <label class="@GetBadgeClass(tag.Title) me-1" for="tag-@tag.Id">@tag.Title</label>
                                    </div>
                                }
                            </div>
                        </div>

                        <!--Kategoria-->
                        <div class="row mb-3">
                            <label for="type-add" class="col-sm-2 col-form-label text-end">Kategoria</label>
                            <div class="col-sm-10">
                                <InputSelect id="cat-add"
                                @bind-Value="book.BookCategoryId"
                                class="form-select">

                                    <option value="">-- Wybierz kategorię --</option>
                                    @foreach (var category in Categories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <!--Tytuł-->
                        <div class="row mb-3">
                            <label for="title-add" class="col-sm-2 col-form-label text-end">Tytuł książki</label>
                            <div class="col-sm-10">
                                <InputText id="title-add"
                                @bind-Value="book.Title"
                                class="form-control p2"
                                placeholder="Tytuł książki"
                                minlength="3"
                                maxlength="60"/>
                            </div>
                        </div>

                        <!--Autor-->
                        <div class="row mb-3">
                            <label for="author-add" class="col-sm-2 col-form-label text-end">Autor</label>
                            <div class="col-sm-10">
                                <InputSelect id="author-add"
                                @bind-Value="book.BookAuthorId"
                                class="form-select">

                                    <option value="">-- Wybierz autora --</option>
                                    @foreach (var author in Authors)
                                    {
                                        <option value="@author.Id">@author.Surname, @author.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <!--Wydawca-->
                        <div class="row mb-3">
                            <label for="publisher-add" class="col-sm-2 col-form-label text-end">Wydawca</label>
                            <div class="col-sm-10">
                                <InputSelect id="publisher-add"
                                @bind-Value="book.BookPublisherId"
                                class="form-select">

                                    <option value="">-- Wybierz wydawcę --</option>
                                    @foreach (var publisher in Publishers)
                                    {
                                        <option value="@publisher.Id">@publisher.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <!--Rok wydania-->
                        <div class="row mb-3">
                            <label for="year-add" class="col-sm-2 col-form-label text-end">Rok wydania</label>
                            <div class="col-sm-10">
                                <InputNumber id="year-add"
                                @bind-Value="book.Year"
                                class="form-control p2"
                                placeholder="2000"
                                type="number"
                                inputmode="numeric"
                                pattern="\d{4}"
                                minlength="4"
                                maxlength="4" />
                            </div>
                        </div>

                        <!--ISBN-->
                        <div class="row mb-3">
                            <label for="isbn-add" class="col-sm-2 col-form-label text-end">Numer ISBN</label>
                            <div class="col-sm-10">
                                <InputText id="isbn-add"
                                @bind-Value="book.Isbn"
                                class="form-control p2"
                                placeholder="978-83-7278-000-3"
                                minlength="17"
                                maxlength="17" />
                            </div>
                        </div>

                        <!--Liczba stron-->
                        <div class="row mb-3">
                            <label for="pages-add" class="col-sm-2 col-form-label text-end">Liczba stron</label>
                            <div class="col-sm-10">
                                <InputNumber id="pages-add"
                                @bind-Value="book.PageCount"
                                class="form-control p2"
                                placeholder="123"
                                minlength="1"
                                maxlength="4" />
                            </div>
                        </div>

                        <!--Opis-->
                        <div class="row mb-3">
                            <label for="desc-add" class="col-sm-2 col-form-label text-end">Opis książki</label>
                            <div class="col-sm-10">
                                <div class="w-100 col-sm-10">
                                    <InputTextArea id="desc-add"
                                    @bind-Value="book.Description"
                                    class="form-control p2"
                                    placeholder="Opis książki"
                                    minlength="3"
                                    maxlength="800" />
                                </div>
                            </div>
                        </div>

                        <!--Seria-->
                        <div class="row mb-3">
                            <label for="series-add" class="col-sm-2 col-form-label text-end">Seria książek</label>
                            <div class="col-sm-10">
                                <InputSelect id="series-add"
                                @bind-Value="book.BookSeriesId"
                                class="form-select p2">

                                    <option value="">-- Wybierz serię --</option>
                                    @foreach (var series in Series)
                                    {
                                        <option value="@series.Id">@series.Title</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <!--Typ książki-->
                        <div class="row mb-3">
                            <label for="type-add" class="col-sm-2 col-form-label text-end">Typ książki</label>
                            <div class="col-sm-10">
                                <InputSelect id="type-add"
                                @bind-Value="book.BookTypeId"
                                class="form-select">

                                    <option value="">-- Wybierz typ --</option>
                                    @foreach (var type in Types)
                                    {
                                        <option value="@type.Id">@type.Title</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <!--Gatunki-->
                        <div class="row mb-3">
                            <label class="col-sm-2 col-form-label text-end">Gatunki</label>
                            <div class="col-sm-10">
                                <div class="row">
                                    @foreach (var genre in Genres)
                                    {
                                        <div class="col-md-4">
                                            <div class="form-check">
                                                <input type="checkbox"
                                                class="form-check-input"
                                                id="genre-@genre.Id"
                                                value="@genre.Id"
                                                checked="@book.BookGenreIds.Contains(genre.Id)"
                                                @onchange="@(() => ToggleGenre(genre.Id))" />
                                                <label class="form-check-label" for="genre-@genre.Id">@genre.Title</label>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        <!--Okładka-->
                        <div class="row mb-3">
                            <label class="col-sm-2 col-form-label text-end">Okładka</label>
                            <div class="col-sm-10">
                                @if (book.ImageUrl != null)
                                {
                                    <div class="d-flex align-items-start col-sm-10">
                                        <div class="d-flex flex-column align-items-center">
                                            <img src=@book.ImageUrl alt="Okładka książki" class="img-thumbnail" style="height:128px">
                                            <button class="btn btn-sm btn-danger" @onclick="DeleteImage">
                                                <i class="bi bi-trash"></i> Usuń okładkę
                                            </button>
                                        </div>
                                    </div>
                                }

                                else
                                {
                                    <div class="d-flex align-items-start col-sm-10">
                                        <InputFile OnChange="LoadFiles" class="form-control" id="customFile"
                                        accept="image/x-png,image/jpeg"></InputFile>
                                    </div>
                                }
                            </div>
                        </div>

                        <!--Przyciski-->
                        <div class="row">
                            <div class="d-flex justify-content-between mt-3">
                                <button @onclick="GoBack" class="btn btn-lg btn-gray">
                                    <i class="bi bi-x-circle"></i> Anuluj
                                </button>

                                <button class="btn btn-lg btn-primary" type="submit">
                                    <i class="bi bi-check-circle"></i>
                                    @(BookId == 0 ? "Utwórz książkę" : "Zapisz zmiany")
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int BookId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private BookUpsertDto book { get; set; } = new ()
    {
       BookGenreIds = new List<int>(),
       BookSpecialTagIds = new List<int>()
    };

    private string? _directoryPath { get; set; }
    private bool IsLoading = true;

    private List<BookAuthor> Authors = new();
    private List<BookPublisher> Publishers = new();
    private List<BookSeries> Series = new();
    private List<BookType> Types = new();
    private List<BookCategory> Categories = new();
    private List<BookGenre> Genres = new();
    private List<BookSpecialTag> SpecialTags = new();

    protected override async Task OnInitializedAsync()
    {
        _directoryPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", "books");
        await LoadData();
        IsLoading = false;
    }

    private async Task LoadData()
    {
        Authors = (await DictionaryRepository.GetBookAuthorsAsync()).ToList();
        Publishers = (await DictionaryRepository.GetBookPublishersAsync()).ToList();
        Series = (await DictionaryRepository.GetBookSeriesAsync()).ToList();
        Types = (await DictionaryRepository.GetBookTypesAsync()).ToList();
        Categories = (await DictionaryRepository.GetBookCategoriesAsync()).ToList();
        Genres = (await DictionaryRepository.GetBookGenresAsync()).ToList();
        SpecialTags = (await DictionaryRepository.GetBookSpecialTagsAsync()).ToList();

        var bookDto = await BookRepository.GetBookByIdAsync(BookId);

        if (bookDto != null)
        {
            var author = Authors.FirstOrDefault(a => $"{a.Surname}, {a.Name}" == bookDto.BookAuthor);
            var publisher = Publishers.FirstOrDefault(p => p.Name == bookDto.BookPublisher);
            var series = Series.FirstOrDefault(s => s.Title == bookDto.BookSeries);
            var type = Types.FirstOrDefault(t => t.Title == bookDto.BookType);
            var category = Categories.FirstOrDefault(c => c.Name == bookDto.BookCategory);
            var genres = Genres.Where(g => bookDto.BookGenres.Contains(g.Title)).ToList();
            var specialtags = SpecialTags.Where(g => bookDto.BookSpecialTags.Contains(g.Title)).ToList();

            if (author == null || publisher == null || type == null || series == null || category == null)
            {
                await JS.ToastrError("Wystąpił błąd ładowania", "Nie udało się odnaleźć wszystkich danych.");
                NavigationManager.NavigateTo("/bookslist");
                return;
            }

            book = new BookUpsertDto
                {
                    Title = bookDto.Title,
                    Year = bookDto.Year,
                    Description = bookDto.Description,
                    Isbn = bookDto.Isbn,
                    PageCount = bookDto.PageCount,
                    IsVisible = bookDto.IsVisible,
                    ImageUrl = bookDto.ImageUrl,
                    BookAuthorId = author.Id,
                    BookPublisherId = publisher.Id,
                    BookSeriesId = series.Id,
                    BookTypeId = type.Id,
                    BookCategoryId = category.Id,
                    BookGenreIds = genres.Select(g => g.Id).ToList(),
                    BookSpecialTagIds = specialtags.Select(g => g.Id).ToList()
                };
        }
    }

    private async Task UpsertBookFormSubmit()
    {
        if (BookId == 0)
        {
            var create = await BookRepository.CreateBookAsync(book);
            if (create != null)
            {
                await JS.ToastrSuccess("Za chwilę nastąpi przekierowanie do poprzedniej strony", "Książka dodana pomyślnie.");
                await Task.Delay(5000);
                GoBack();
            }

            else
            {
                await JS.ToastrError("Za chwilę nastąpi przekierowanie do poprzedniej strony", "Nie udało się dodać książki");
                await Task.Delay(5000);
                GoBack();
            }

        }
        else
        {
            var update = await BookRepository.UpdateBookAsync(BookId, book);
            if (update != null)
            {
                await JS.ToastrSuccess("Za chwilę nastąpi przekierowanie do poprzedniej strony", "Książka zaktualizowana pomyślnie");
            }
            else
            {
                await JS.ToastrError("Za chwilę nastąpi przekierowanie do poprzedniej strony", "Nie udało się zaktualizować książki");
            }
        }

        //NavigationManager.NavigateTo("/bookslist");
    }

    private void ToggleGenre(int genreId)
    {
        if (book == null) return;

        if (book.BookGenreIds.Contains(genreId))
            book.BookGenreIds.Remove(genreId);
        else
            book.BookGenreIds.Add(genreId);
    }

    private void ToggleSpecialTag(int tagId)
    {
        if (book == null) return;

        if (book.BookSpecialTagIds.Contains(tagId))
            book.BookSpecialTagIds.Remove(tagId);
        else
            book.BookSpecialTagIds.Add(tagId);
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        var file = e.File;
        System.IO.FileInfo fileInfo = new(file.Name);
        var newFileName = $"{Guid.NewGuid()}.{fileInfo.Extension}";
        if (!Directory.Exists(_directoryPath))
        {
            Directory.CreateDirectory(_directoryPath);
        }
        var path = Path.Combine(_directoryPath, newFileName);

        await using FileStream fileStream = new(path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fileStream);
        book.ImageUrl = $"/images/books/{newFileName}";
        IsLoading = false;
    }

    void DeleteImage()
    {
        if (book.ImageUrl == null)
            return;


        var fileToDelete = book.ImageUrl.Split('/').Reverse().First();

        var filePathToDeleteImage = Path.Combine(_directoryPath, fileToDelete);

        if (!File.Exists(filePathToDeleteImage))
        {
            book.ImageUrl = null;
            return;
        }

        File.Delete(filePathToDeleteImage);

        book.ImageUrl = null;
        return;
    }

    private void GoBack()
    {
        if (!string.IsNullOrEmpty(ReturnUrl))
            NavigationManager.NavigateTo(ReturnUrl);
        else
            NavigationManager.NavigateTo("/bookslist");
    }

    private string GetBadgeClass(string tag)
    {
        return tag switch
        {
            "Polecane" => "badge bg-success",
            "Nowości" => "badge bg-warning text-dark",
            "Popularne" => "badge bg-info text-dark",
            _ => "badge bg-secondary"
        };
    }
}
