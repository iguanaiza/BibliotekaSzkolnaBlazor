@page "/bookslist"

@inject IBookRepository BookRepository
@inject IJSRuntime JS

@rendermode InteractiveServer

<BinModal OnModalConfirmation="ConfirmDelete_Click" />

<ManageNavbar />

        @if (IsLoading)
        {
            <div class="position-absolute w-75  h-75 d-flex flex-column align-items-center bg-white justify-content-center">
                <img src="/images/loading-book.gif" alt="loading" />
                <p>Ładowanie...</p>
            </div>
        }

        else
        {
            <div class="card shadow border-0 m-4 ">
                <div class="card-header bg-theme bg-gradient ml-0 py-3">
                    <div class="row">
                        <div class="col-12 text-center">
                    <h2 class="h2-custom">Lista książek</h2>
                        </div>
                    </div>
                </div>

                <div class="card-body p-4">
                    <div class="row pb-3">
                        <div class="col-12 text-end">
                            <a href="/bookslist/create?returnUrl=/bookslist" class="btn btn-lg btn-primary">
                                <i class="bi bi-journal-plus"></i> Dodaj nową książkę
                            </a>
                        </div>
                    </div>

                    @if (Books.Any())
                    {
                       
                        int index = 1;

                        <div class="table-responsive">
                            <table class="table table-striped table-bordered table-hover table-sm text-nowrap">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th></th>
                                        <th>Tytuł</th>
                                        <th>Autor</th>
                                        <th>Oznaczenia</th>
                                        <th>Ilość</th>
                                        <th>ISBN</th>
                                        <th>Wydawca</th>
                                        <th>Rok wydania</th>
                                        <th>Katalog</th>
                                        <th>Kategoria</th>
                                        <th>Akcje</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var book in Books)
                                    {
                                        <tr>
                                           
                                            <td>@index</td>
                                            
                                            <td>
                                                <a href="/bookslist/view/@book.Id" class="btn btn-outline-primary btn-sm">
                                                    <i class="bi bi-info-square"></i>
                                                </a>
                                            </td>
                                            <td>@book.Title</td>
                                            <td>@book.BookAuthor</td>
                                            <td>
                                                @if (book.BookSpecialTags != null && book.BookSpecialTags.Any())
                                                {
                                                    foreach (var tag in book.BookSpecialTags)
                                                    {
                                                        <label class="@GetBadgeClass(tag) me-1">@tag</label>
                                                    }
                                                }
                                            </td>
                                            <td>@book.CopyCount</td>
                                            <td>@book.Isbn</td>
                                            <td>@book.BookPublisher</td>
                                            <td>@book.Year</td>
                                            <td>@(book.IsVisible ? "Tak" : "Nie")</td>
                                            <td>@book.BookCategory</td>
                                            <td class="text-end">
                                                <div class="d-flex justify-content-end gap-2">
                                                    <a href="/bookslist/edit/@book.Id?returnUrl=/bookslist" class="btn btn-outline-primary btn-sm" title="Edytuj">
                                                        <i class="bi bi-pencil-square"></i> Edytuj
                                                    </a>
                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => HandleDelete(book.Id)" title="Usuń">
                                                        <i class="bi bi-trash3"></i> Usuń
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                        index++;
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                
                </div>
            </div>
        }
@code {
    private bool IsLoading { get; set; } = true;
    private IEnumerable<BookGetDto> Books { get; set; } = new List<BookGetDto>();
    private int DeleteBookID { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
        IsLoading = false;
    }

    private async Task LoadBooks()
    {
        Books = await BookRepository.GetBooksAsync();
    }

    private void HandleDelete(int id)
    {
        DeleteBookID = id;
        JS.InvokeVoidAsync("ShowDeleteModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        await JS.InvokeVoidAsync("HideDeleteModal");

        if (isConfirmed && DeleteBookID !=0)
        {
            var result = await BookRepository.BinBookAsync(DeleteBookID);
            
            if (result == null)
            {
                await JS.ToastrWarning("Nie znaleziono książki", "Nie udało się usunąć książki.");
            }

            else
            {
                await JS.ToastrInfo("Możesz cofnąć akcję z widoku kosza.", "Książka przeniesiona do kosza.");
            }

            await LoadBooks();
        }

        DeleteBookID = 0;
        IsLoading = false;
    }

    private string GetBadgeClass(string tag)
    {
        return tag switch
        {
            "Polecane" => "badge bg-success",
            "Nowości" => "badge bg-warning text-dark",
            "Popularne" => "badge bg-info text-dark",
            _ => "badge bg-secondary"
        };
    }
}