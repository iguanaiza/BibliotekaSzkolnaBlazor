@page "/userslist"

@inject IUserRepository _userRepository
@inject IJSRuntime _JS

@rendermode InteractiveServer

<Modal OnModalConfirmation="ConfirmDelete_Click"></Modal>

@if (IsLoading)
{
    <div class="position-absolute w-75  h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading-book.gif" alt="loading" />
        <p>Ładowanie...</p>
    </div>
}

else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-theme bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Lista użytkowników</h2>
                </div>
            </div>
        </div>

        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="/bookslist/create?returnUrl=/bookslist" class="btn btn-lg btn-primary" style="width:250px;">
                        <i class="bi bi-plus-square-fill"></i> Dodaj nowego użytkownika
                    </a>
                </div>
            </div>

            @if (Users.Any())
            {
                int index = 1;
                <div class="table-responsive">
                    <table class="table table-striped table-bordered table-sm align-middle table-hover text-nowrap">
                        <thead>
                            <tr>
                                <th scope="col"></th>
                                <th scope="col">#</th>
                                <th scope="col">Imię</th>
                                <th scope="col">Nazwisko</th>
                                <th scope="col">Klasa</th>
                                <th scope="col">Kary</th>
                                <th scope="col">Akcje</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in Users)
                            {
                                <tr>
                                    <td>
                                        <a href="/userslist/view/@user.Id" class="btn btn-outline-primary btn-sm">
                                            <i class="bi bi-info-square"></i>
                                        </a>
                                    </td>
                                    <td>@index</td>
                                    <td>@user.FirstName</td>
                                    <td>@user.LastName</td>
                                    <td>@user.Class</td>
                                    <td>@user.TotalPenaltyAmount</td>
                                    <td class="text-end">
                                        <div class="d-flex justify-content-end gap-2">
                                            <a href="/userslist/edit/@user.Id?returnUrl=/userslist" class="btn btn-outline-primary btn-sm" title="Edytuj">
                                                <i class="bi bi-pencil-square"></i> Edytuj
                                            </a>
                                            <button class="btn btn-danger btn-sm" @onclick="() => HandleDelete(user.Id)" title="Dezaktywuj">
                                                <i class="bi bi-trash3"></i> Dezaktywuj
                                            </button>
                                        </div>
                                    </td>

                                </tr>
                                index++;
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}

@code {
    private bool IsLoading { get; set; } = true;
    private IEnumerable<UserGetDto> Users { get; set; } = new List<UserGetDto>();
    private string DisableUserID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        IsLoading = false;
    }

    private async Task LoadUsers()
    {
        Users = await _userRepository.GetUsersAsync();
    }

    private void HandleDelete(string id)
    {
        DisableUserID = id;
        _JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        await _JS.InvokeVoidAsync("HideConfirmationModal");

        if (isConfirmed && DisableUserID != null)
        {
            var result = await _userRepository.DisableUserAsync(DisableUserID);
            
            if (result == null)
            {
                await _JS.ToastrError("Nie udało się wyłączyć konta użytkownika.");
            }
            else
            {
                await _JS.ToastrSuccess("Konto użytkownika zostało wyłączone.");
            }

            await LoadUsers();
        }
        DisableUserID = null;
        IsLoading = false;
    }
}