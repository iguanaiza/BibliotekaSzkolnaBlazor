@page "/cataloghome/catalog"
@page "/cataloghome/search/{BookId:int}"

@inject IBookRepository _bookRepository
@inject IDictionaryRepository _dictionaryRepository
@inject NavigationManager _navigationManager

@rendermode InteractiveServer

<div class="w-100">
    <div class="mx-auto px-3" style="max-width: 1366px;">
        <!--Menu główne i searchbar-->
        <CatalogNavbar />

        @foreach (var book in Books)
        {
            <!--Informacje o książce-->
            <div class="card mb-3 shadow-sm" style="max-width: 600px;">
                <div class="row g-0">
                    <div class="col-md-4 d-flex justify-content-center align-items-center">
                        <div class="book-cover-container">
                        @if (book.ImageUrl == null)
                        {
                            <p class="text-muted text-center m-0">Brak okładki.</p>
                        }
                        @if (book.ImageUrl != null)
                        {
                            <img src="@book.ImageUrl"
                                 alt="Okładka książki @book.Title">
                        }
                        </div>
                    </div>

                    <div class="col-md-8 d-flex flex-column justify-content-between p-3">

                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <div aria-label="Tagi specjalne">
                                @if (book.BookSpecialTags != null && book.BookSpecialTags.Any())
                                {
                                    foreach (var tag in book.BookSpecialTags)
                                    {
                                        <span class="@GetBadgeClass(tag) me-1" role="note">@tag</span>
                                    }
                                }
                            </div>

                            <div>
                                <a class="btn btn-sm btn-outline-success me-2" role="button" aria-label="Dodaj do ulubionych">Ulubione</a>
                                <a href="/cataloghome/catalog/view/@book.Id?returnUrl=/cataloghome/catalog" class="btn btn-sm btn-primary" role="button" aria-label="Szczegóły książki">Szczegóły</a>
                            </div>
                        </div>

                        <div class="card-body p-0">
                            <h5 class="card-title">@book.Title</h5>
                            <p class="card-text truncate-3-lines mb-0">@book.Description</p>
                            <p class="card-text">
                                <small class="text-body-secondary" aria-label="Autor">@book.BookAuthor</small>
                            </p>
                        </div>

                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <p class="card-text mb-0">Dostępnych: <b>@book.AvailableCopyCount</b></p>
                            <a class="btn btn-sm btn-success" role="button" aria-label="Wypożycz">Wypożycz</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int BookId { get; set; }

    private IEnumerable<BookGetDto> Books { get; set; } = new List<BookGetDto>();

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }
    private string? _directoryPath { get; set; }

    private Dictionary<string, IEnumerable<BookGetDto>> BooksByTag = new();


    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        Books = await _bookRepository.GetBooksAsync();
    }

    private string GetBadgeClass(string tag)
    {
        return tag switch
        {
            "Polecane" => "badge bg-success",
            "Nowości" => "badge bg-warning text-dark",
            "Popularne" => "badge bg-info text-dark",
            _ => "badge bg-secondary"
        };
    }
}