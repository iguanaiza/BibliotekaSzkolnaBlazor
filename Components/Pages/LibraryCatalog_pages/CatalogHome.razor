@page "/"

@inject IBookRepository _bookRepository
@inject IDictionaryRepository _dictionaryRepository
@inject IJSRuntime _JS
@inject NavigationManager _navigationManager

@rendermode InteractiveServer

<PageTitle>Strona główna</PageTitle>


<CatalogNavbar/>

<div class="w-100">
    <div class="mx-auto px-3" style="max-width: 1366px;">
        <!--Menu główne i searchbar-->
        <CatalogSearchBar />

        <!--Body-->
        @foreach (var tag in BooksByTag.Keys)
        {
            <div class="card shadow mb-4 p-4">
                <div class="mb-4 px-2">
                    <h2 class="fw-bold">@tag</h2>
                </div>

                <div class="carousel-outer px-2" id="carousel-@tag">
                    <button class="carousel-btn left" @onclick="() => Scroll(tag, -1)">&#10094;</button>

                    <div class="scroll-container pb-3">
                        @foreach (var book in BooksByTag[tag])
                        {
                            <a href="/view/@book.Id?returnUrl=/" class="book-card text-decoration-none text-dark">
                                <img src="@book.ImageUrl" alt="@book.Title" class="book-cover" />
                                <div class="book-title">@book.Title</div>
                            </a>
                        }
                    </div>

                    <button class="carousel-btn right" @onclick="() => Scroll(tag, 1)">&#10095;</button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }
    private string? _directoryPath { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? term { get; set; }

    private Dictionary<string, IEnumerable<BookGetDto>> BooksByTag = new();


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        // Pobierz listę tagów specjalnych z bazy
        var tags = await _dictionaryRepository.GetBookSpecialTagsAsync();

        // Dla każdego tagu pobierz książki i zapisz w słowniku
        foreach (var tag in tags)
        {
            var books = await _bookRepository.GetBooksByTagAsync(tag.Title);
            BooksByTag[tag.Title] = books;
        }
    }

    private async Task Scroll(string tag, int direction)
    {
        await _JS.InvokeVoidAsync("scrollCarousel", $"carousel-{tag}", direction);
    }
}