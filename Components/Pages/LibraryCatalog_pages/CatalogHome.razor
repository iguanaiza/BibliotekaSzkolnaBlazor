@page "/cataloghome"

@inject IBookRepository _bookRepository
@inject IDictionaryRepository _dictionaryRepository
@inject IJSRuntime _JS
@inject NavigationManager _navigationManager

@rendermode InteractiveServer

<!--Menu główne i searchbar-->
<CatalogNavbar></CatalogNavbar>

<!--Body-->
@foreach (var tag in BooksByTag.Keys)
{
    <div class="card m-4 p-3">
        <div class="row g-0">
            <h2 class="mb-4 fw-bold px-2">@tag</h2>

            <div class="position-relative px-2">
                <div class="d-flex overflow-auto gap-4 scroll-container pb-3">
                    @foreach (var book in BooksByTag[tag])
                    {
                        <a href="/bookslist/view/@book.Id?returnUrl=/cataloghome"
                           class="book-card text-decoration-none text-dark">
                            <img src="@book.ImageUrl" alt="@book.Title" class="book-cover" />
                            <div class="book-title">@book.Title</div>
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }
    private string? _directoryPath { get; set; }

    private Dictionary<string, IEnumerable<BookGetDto>> BooksByTag = new();


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        // Pobierz listę tagów specjalnych z bazy
        var tags = await _dictionaryRepository.GetBookSpecialTagsAsync();

        // Dla każdego tagu pobierz książki i zapisz w słowniku
        foreach (var tag in tags)
        {
            var books = await _bookRepository.GetBooksByTagAsync(tag.Title);
            BooksByTag[tag.Title] = books;
        }
    }
}
