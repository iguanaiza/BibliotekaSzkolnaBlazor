@page "/system/wypozyczenia"
@layout ManagementLayout
@inject IBookLoanRepository BookLoanRepository
@inject IJSRuntime JS

@rendermode InteractiveServer

<PageTitle>Lista wypożyczeń</PageTitle>

@if (IsLoading)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading-book.gif" alt="loading" />
        <p>Ładowanie wypożyczeń...</p>
    </div>
}
else
{
    <div class="card-header bg-theme bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="h2-custom">Lista aktywnych wypożyczeń</h2>
            </div>
        </div>
    </div>

    <div class="card-body p-4">
        @if (Loans.Any())
        {
            <div class="table-responsive tbl-list">
                <table class="table table-striped table-bordered table-hover table-sm text-nowrap">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Numer karty</th>
                            <th>Nazwisko</th>
                            <th>Imię</th>
                            <th>Sygnatura</th>
                            <th>Autor</th>
                            <th>Tytuł</th>
                            <th>Data wypożyczenia</th>
                            <th>Termin zwrotu</th>
                            <th>Kara (PLN)</th>
                            <th>Przedłużone</th>
                            <th>Akcje</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int index = (CurrentPage - 1) * PageSize + 1;
                        }
                        @foreach (var loan in Loans)
                        {
                            <tr>
                                <td class="td-center fw-bold">@index</td>
                                <td class="td-center">@loan.LibraryCardNumber</td>
                                <td>@loan.UserLastName</td>
                                <td>@loan.UserFirstName</td>
                                <td class="td-center">@loan.Signature</td>
                                <td>@loan.AuthorFullName</td>
                                <td class="text-truncate" style="max-width:200px;">@loan.Title</td>
                                <td class="td-center">@loan.BorrowDate.ToString("yyyy-MM-dd")</td>
                                <td class="td-center">@(loan.DueDate?.ToString("yyyy-MM-dd") ?? "")</td>
                                <td class="td-center">@(loan.PenaltyAmount?.ToString("F2") ?? "")</td>
                                <td class="td-center">@(loan.WasProlonged ? "Tak" : "Nie")</td>
                                <td>
                                    <button class="btn btn-primary btn-sm" @onclick="() => ReturnLoan(loan.LoanId)">
                                        <i class="bi bi-arrow-return-left"></i> Zwrot
                                    </button>
                                </td>
                            </tr>
                            index++;
                        }
                    </tbody>
                </table>

                <div class="d-flex justify-content-center align-items-center gap-3 mt-3">
                    <button class="btn btn-primary" @onclick="() => ChangePage(CurrentPage - 1)" disabled="@(CurrentPage == 1)">Poprzednia</button>

                    <span>Strona @CurrentPage z @TotalPages</span>

                    <button class="btn btn-primary" @onclick="() => ChangePage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">Następna</button>
                </div>
            </div>
        }
        else
        {
            <p>Brak aktywnych wypożyczeń.</p>
        }
    </div>
}

@code {
    private bool IsLoading = true;
    private List<LoanDto> Loans = new();
    private int CurrentPage = 1;
    private int PageSize = 10;
    private int TotalCount;
    private int TotalPages => (int)Math.Ceiling(TotalCount / (double)PageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadLoans();
        IsLoading = false;
    }

    private async Task LoadLoans()
    {
        var result = await BookLoanRepository.GetActiveLoansPagedAsync(CurrentPage, PageSize);
        Loans = result.loans;
        TotalCount = result.totalCount;
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > TotalPages)
            return;

        CurrentPage = page;
        await LoadLoans();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ReturnLoan(int loanId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Czy na pewno chcesz zwrócić tę książkę?");
        if (!confirmed) return;

        await BookLoanRepository.ReturnLoanAsync(loanId, DateTime.UtcNow);
        await LoadLoans();
        await InvokeAsync(StateHasChanged);
    }
}
