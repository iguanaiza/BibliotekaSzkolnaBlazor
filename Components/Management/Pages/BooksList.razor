@page "/system/zasoby"
@layout ManagementLayout
@inject IBookRepository BookRepository
@inject IJSRuntime JS

@rendermode InteractiveServer

<PageTitle>Lista zasobów</PageTitle>

<BinModal OnModalConfirmation="ConfirmDelete_Click" />

@if (IsLoading)
{
    <div class="position-absolute w-75  h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading-book.gif" alt="loading" />
        <p>Ładowanie...</p>
    </div>
}

else
{
    <div class="card-header bg-theme bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="h2-custom">Lista książek</h2>
            </div>
        </div>
    </div>

    <div class="card-body p-4">
        <div class="row pb-3">
            <div class="col-12 text-end">
                <a href="/system/zasoby/create?returnUrl=/system/zasoby" class="btn btn-lg btn-primary">
                    <i class="bi bi-journal-plus"></i> Dodaj nową książkę
                </a>
            </div>
        </div>

        @if (Books.Any())
        {
            <div class="table-responsive tbl-list">
                <table class="table table-striped table-bordered table-hover table-sm text-nowrap">
                    <thead>
                        <tr>
                            <th></th>
                            <th>#</th>
                            <th>Autor</th>
                            <th>Tytuł</th>
                            <th>Ilość</th>
                            <th>ISBN</th>
                            <th>Wydawca</th>
                            <th>Rok wydania</th>
                            <th>Katalog</th>
                            <th>Oznaczenia</th>
                            <th>Akcje</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int index = (CurrentPage - 1) * PageSize + 1;
                        }
                        @foreach (var book in FilteredBooks)
                        {
                            <tr>
                                <td>
                                    <a href="/system/zasoby/view/@book.Id" class="btn btn-outline-primary btn-sm">
                                        <i class="bi bi-info-square"></i>
                                    </a>
                                </td>
                                <td class="td-center fw-bold">@index</td>
                                <td>@book.BookAuthor</td>
                                <td class="text-truncate" style="max-width:200px;">@book.Title</td>
                                <td class="td-center">@book.CopyCount</td>
                                <td class="td-center">@book.Isbn</td>
                                <td class="text-truncate" style="max-width:200px;">@book.BookPublisher</td>
                                <td class="td-center">@book.Year</td>
                                <td class="td-center">@(book.IsVisible ? "Tak" : "Nie")</td>
                                <td>
                                    @if (book.BookSpecialTags != null && book.BookSpecialTags.Any())
                                    {
                                        foreach (var tag in book.BookSpecialTags)
                                        {
                                            <label class="@GetBadgeClass(tag) me-1">@tag</label>
                                        }
                                    }
                                </td>
                                <td class="text-center d-flex justify-content-start gap-2">
                                    <a href="/system/zasoby/edit/@book.Id?returnUrl=/system/zasoby" class="btn btn-outline-primary btn-sm" title="Edytuj">
                                        <i class="bi bi-pencil-square"></i>
                                    </a>
                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => HandleDelete(book.Id)" title="Usuń">
                                        <i class="bi bi-trash3"></i>
                                    </button>
                                </td>
                            </tr>
                            index++;
                        }
                    </tbody>
                </table>
                <div class="d-flex justify-content-center align-items-center gap-3 mt-3">
                    <button class="btn btn-primary" @onclick="() => ChangePage(CurrentPage - 1)" disabled="@(CurrentPage == 1)">Poprzednia</button>

                    <span>Strona @CurrentPage z @((TotalCount + PageSize - 1) / PageSize)</span>

                    <button class="btn btn-primary" @onclick="() => ChangePage(CurrentPage + 1)" disabled="@(CurrentPage * PageSize >= TotalCount)">Następna</button>
                </div>

            </div>
        }

    </div>
}

@code {
    private bool IsLoading { get; set; } = true;
    private IEnumerable<BookGetDto> Books { get; set; } = new List<BookGetDto>();
    private int DeleteBookID { get; set; } = 0;
    private int CurrentPage = 1;
    private int PageSize = 10;
    private int TotalCount = 0;
    private List<BookGetDto> FilteredBooks = new List<BookGetDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
        IsLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("applyUserPreferences");
        }
    }

    private async Task LoadBooks()
    {
        Books = await BookRepository.GetBooksAsync();
        TotalCount = Books.Count();
        LoadFilteredBooks();
    }

    private void LoadFilteredBooks()
    {
    FilteredBooks = Books
        .Skip((CurrentPage - 1) * PageSize)
        .Take(PageSize)
        .ToList();
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > (int)Math.Ceiling(TotalCount / (double)PageSize))
            return;

        CurrentPage = page;
        LoadFilteredBooks();
        await InvokeAsync(StateHasChanged);
    }

    private void HandleDelete(int id)
    {
        DeleteBookID = id;
        JS.InvokeVoidAsync("ShowDeleteModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        await JS.InvokeVoidAsync("HideDeleteModal");

        if (isConfirmed && DeleteBookID !=0)
        {
            var result = await BookRepository.BinBookAsync(DeleteBookID);
            
            if (result == null)
            {
                await JS.ToastrWarning("Nie znaleziono książki", "Nie udało się usunąć książki.");
            }

            else
            {
                await JS.ToastrInfo("Możesz cofnąć akcję z widoku kosza.", "Książka przeniesiona do kosza.");
            }

            await LoadBooks();
        }

        DeleteBookID = 0;
        IsLoading = false;
    }

    private string GetBadgeClass(string tag)
    {
        return tag switch
        {
            "Polecane" => "badge bg-success",
            "Nowości" => "badge bg-warning text-dark",
            "Popularne" => "badge bg-info text-dark",
            _ => "badge bg-secondary"
        };
    }
}