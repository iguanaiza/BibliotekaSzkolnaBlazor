@page "/system/czytelnicy/edit/{LibraryId:int}"
@layout ManagementLayout

@inject NavigationManager NavigationManager
@inject IUserRepository UserRepository
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Edytuj użytkownika</PageTitle>

<div class="card-body p-4">
    <div class="row pb-3">
        <div class="col-12 text-end">
            <div class="col-12 text-start">
                <a href="/system/czytelnicy" class="btn btn-primary">
                    <i class="bi bi-arrow-bar-left"></i> Powrót
                </a>
            </div>
        </div>
    </div>

    <div class="form-custom card shadow mb-4 p-4 mx-auto">
        <div class="mb-4 px-2">
            <EditForm Model="Input" FormName="update-user" OnValidSubmit="HandleValidSubmit" method="post">
                <DataAnnotationsValidator />

                <ValidationSummary class="text-danger" role="alert" />

                <div class="row mb-3">
                    <label for="libraryId" class="col-sm-2 col-form-label text-end">Numer karty</label>
                    <div class="col-sm-10">
                        <InputNumber @bind-Value="Input.LibraryId" class="form-control p2" aria-required="true" placeholder="10005" />
                        <ValidationMessage For="() => Input.LibraryId" class="text-danger" />
                    </div>
                </div>

                <div class="row mb-3">
                    <label for="firstname" class="col-sm-2 col-form-label text-end">Imię</label>
                    <div class="col-sm-10">
                        <InputText @bind-Value="Input.FirstName" class="form-control p2" aria-required="true" placeholder="Imię" />
                        <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                    </div>
                </div>

                <div class="row mb-3">
                    <label for="lastname" class="col-sm-2 col-form-label text-end">Nazwisko</label>
                    <div class="col-sm-10">
                        <InputText @bind-Value="Input.LastName" class="form-control p2" aria-required="true" placeholder="Nazwisko" />
                        <ValidationMessage For="() => Input.LastName" class="text-danger" />
                    </div>
                </div>

                <div class="row mb-3">
                    <label for="class" class="col-sm-2 col-form-label text-end">Klasa</label>
                    <div class="col-sm-10">
                        <InputText @bind-Value="Input.Class" class="form-control p2" autocomplete="username" aria-required="true" placeholder="1A" />
                        <ValidationMessage For="() => Input.Class" class="text-danger" />
                    </div>
                </div>

                <div class="row mb-3">
                    <label for="email" class="col-sm-2 col-form-label text-end">E-mail</label>
                    <div class="col-sm-10">
                        <InputText @bind-Value="Input.Email" class="form-control p2" autocomplete="username" aria-required="true" placeholder="imie@test.pl" />
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                </div>

                <!--Przyciski-->
                <div class="row">
                    <div class="d-flex justify-content-between mt-3">
                        <a href="/system/czytelnicy" class="btn btn-lg btn-outline-primary">
                            <i class="bi bi-x-circle"></i> Anuluj
                        </a>

                        <button class="btn btn-lg btn-primary" type="submit">
                            <i class="bi bi-check-circle"></i> Edytuj
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public int LibraryId { get; set; }
    private string userId = string.Empty;

    private UserUpsertDto Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var userDto = await UserRepository.GetUserByLibraryIdAsync(LibraryId);
        if (userDto == null)
        {
            NavigationManager.NavigateTo("/system/czytelnicy");
            return;
        }

        userId = userDto.Id;

        Input = new UserUpsertDto
            {
                LibraryId = userDto.LibraryId,
                Email = userDto.Email,
                FirstName = userDto.FirstName,
                LastName = userDto.LastName,
                Class = userDto.Class
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("applyUserPreferences");
        }
    }

    private async Task HandleValidSubmit()
    {
        var updatedUser = await UserRepository.UpdateUserAsync(userId, Input);

        if (updatedUser != null)
        {
            await JS.ToastrSuccess("Za chwilę nastąpi przekierowanie do poprzedniej strony", "Użytkownik zaktualizowany pomyślnie");
            await Task.Delay(5000);
            NavigationManager.NavigateTo("/system/czytelnicy");
        }
        else
        {
            await JS.ToastrError("Za chwilę nastąpi przekierowanie do poprzedniej strony", "Nie udało się zaktualizować użytkownika.");
            await Task.Delay(5000);
            NavigationManager.NavigateTo("/system/czytelnicy");
        }
    }
}
