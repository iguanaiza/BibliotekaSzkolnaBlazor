@page "/system/czytelnicy/view/{LibraryId:int}"
@layout ManagementLayout
@inject IUserRepository UserRepository
@inject IBookLoanRepository BookLoanRepository
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Szczegóły użytkownika</PageTitle>

<BinModal OnModalConfirmation="ConfirmDelete_Click" />

@if (IsLoading)
{
    <div class="position-absolute w-75  h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading-book.gif" alt="loading" />
        <p>Ładowanie...</p>
    </div>
}

else
{
    <div class="card-header bg-theme bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="py-2">Czytelnik @userDto?.LibraryId</h2>
            </div>
        </div>
    </div>

    <div class="card-body p-4">
        <div class="row pb-3">
            <div class="d-flex flex-wrap justify-content-between align-items-center gap-2 m-auto">
                <button @onclick="GoBack" class="btn btn-primary">
                    <i class="bi bi-arrow-bar-left"></i> Powrót
                </button>

                <div class="d-flex flex-wrap gap-2">
                    <a href="/system/czytelnicy/edit/@userDto.LibraryId?returnUrl=/system/czytelnicy"
                       class="btn btn-outline-primary"
                       title="Edytuj">
                        <i class="bi bi-pencil-square"></i> Edytuj
                    </a>

                    <button class="btn btn-outline-danger btn-sm" @onclick="() => HandleDelete(userDto.Id)" title="Dezaktywuj">
                        <i class="bi bi-person-dash"></i> Dezaktywuj
                    </button>
                </div>
            </div>
        </div>


        <!--Informacje o użytkowniku-->
        <div class="card mb-3">
            <div class="row g-0">
                <div class="col-md-8">
                    <div class="card-body">
                        <table class="details align-middle">
                            <tbody>
                                <tr>
                                    <th class="text-end"> Numer karty</th>
                                    <td>@userDto?.LibraryId</td>
                                </tr>
                                <tr>
                                    <th class="text-end"> Imię </th>
                                    <td>@userDto?.FirstName</td>
                                </tr>
                                <tr>
                                    <th class="text-end"> Nazwisko </th>
                                    <td>@userDto?.LastName</td>
                                </tr>
                                <tr>
                                    <th class="text-end"> E-mail </th>
                                    <td>@userDto?.Email</td>
                                </tr>
                                <tr>
                                    <th class="text-end"> Klasa </th>
                                    <td>@userDto?.Class</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div>
        <div class="card-header bg-theme bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="py-2">Historia wypożyczeń</h2>
                </div>
            </div>
        </div>

        <div class="card-body p-4">
            @if (Loans.Any())
            {
                int index = 1;

                <div class="table-responsive-xxl">
                    <table class="table table-striped table-bordered table-hover table-sm text-nowrap">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th></th>
                                <th>Tytuł</th>
                                <th>Autor</th>
                                <th>Data wypożyczenia</th>
                                <th>Data zwrotu</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Loans.Select((loan, index) => new { loan, index }))
                            {
                                <tr>
                                    <td>@(item.index + 1).</td>
                                    <td>
                                        <a href="/lektury/view/@item.loan.LoanId" class="btn btn-outline-primary btn-sm" title="Szczegóły książki">
                                            <i class="bi bi-info-square"></i>
                                        </a>
                                    </td>
                                    <td>@item.loan.Title</td>
                                    <td>@item.loan.AuthorFullName</td>
                                    <td>@item.loan.BorrowDate.ToString("yyyy-MM-dd")</td>
                                    <td>@(item.loan.ReturnDate?.ToString("yyyy-MM-dd") ?? "-")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int LibraryId { get; set; }

    private string userId = "";
    private UserGetDto? userDto;
    private List<LoanDto> Loans { get; set; } = new();
    private string DisableUserID { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        IsLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("applyUserPreferences");
        }
    }

    private void HandleDelete(string id)
    {
        DisableUserID = id;
        JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task LoadData()
    {
        var user = await UserRepository.GetUserByLibraryIdAsync(LibraryId);
        if (user == null)
        {
            NavigationManager.NavigateTo("/system/czytelnicy");
            return;
        }

        userId = user.Id;
        userDto = user;

        Loans = user.BookLoans?
             .Select(l => new LoanDto
                 {
                     LoanId = l.Id,
                     Title = l.BookCopy?.Book?.Title ?? "Brak tytułu",
                     AuthorFullName = l.BookCopy?.Book?.BookAuthor != null
                         ? $"{l.BookCopy.Book.BookAuthor.Name} {l.BookCopy.Book.BookAuthor.Surname}"
                         : "Brak autora",
                     BorrowDate = l.BorrowDate,
                     ReturnDate = l.ReturnDate,
                     PenaltyAmount = l.PenaltyAmount
                 })
             .ToList()
         ?? new List<LoanDto>();
    }

    private void GoBack()
    {
        if (!string.IsNullOrEmpty(ReturnUrl))
            NavigationManager.NavigateTo(ReturnUrl);
        else
            NavigationManager.NavigateTo("/system/czytelnicy");
    }

    public class LoanDto
    {
        public int LoanId { get; set; }
        public string Title { get; set; } = "";
        public string AuthorFullName { get; set; } = "";
        public DateTime BorrowDate { get; set; }
        public DateTime? ReturnDate { get; set; }
        public decimal PenaltyAmount { get; set; }
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        await JS.InvokeVoidAsync("HideConfirmationModal");

        if (isConfirmed && DisableUserID != null)
        {
            var result = await UserRepository.DisableUserAsync(DisableUserID);

            if (result == false)
            {
                await JS.ToastrError("Nie znaleziono użytkownika.", "Nie udało się wyłączyć konta użytkownika.");
            }
            else
            {
                await JS.ToastrSuccess("Konto zdezaktywowano pomyślnie.", "Konto wyłączone.");
            }
        }
        DisableUserID = null;
        IsLoading = false;
    }
}