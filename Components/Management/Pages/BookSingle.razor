@page "/bookslist/view/{BookId:int}"
@layout ManagementLayout
@inject IBookRepository BookRepository
@inject IDictionaryRepository DictionaryRepository
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<BinModal OnModalConfirmation="ConfirmDelete_Click" />

<PageTitle>Szczegóły ksiązki</PageTitle>

@if (IsLoading)
{
    <div class="position-absolute w-75  h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading-book.gif" alt="loading" />
        <p>Ładowanie...</p>
    </div>
}

else
{
    <div class="card-header bg-theme bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="py-2">@book.Title </h2>
            </div>
        </div>
    </div>

    <div class="card-body p-4">
        <div class="row pb-3">
            <div class="d-flex flex-wrap justify-content-between align-items-center gap-2 m-auto">
                <button @onclick="GoBack" class="btn btn-primary">
                    <i class="bi bi-arrow-bar-left"></i> Powrót
                </button>

                <div class="d-flex flex-wrap gap-2">
                    <a href="/bookslist/edit/@book.Id?returnUrl=/bookslist/view/@book.Id"
                       class="btn btn-outline-primary"
                       title="Edytuj">
                        <i class="bi bi-pencil-square"></i> Edytuj
                    </a>

                    <button class="btn btn-outline-danger" @onclick="() => HandleDelete(book.Id)" title="Usuń">
                        <i class="bi bi-trash3"></i> Usuń
                    </button>
                </div>
            </div>
        </div>


        <!--Informacje o książce-->
        <div class="card mb-3">
            <div class="row g-0">
                <!--Okładka-->
                <div class="col-md-4 d-flex justify-content-center align-items-center">
                    @if (book.ImageUrl == null)
                    {
                        <p class="text-muted">Brak okładki.</p>
                    }
                    else
                    {
                        <img src=@book.ImageUrl alt="Okładka książki" class="details-image">
                    }
                </div>
                <!--Opis-->
                <div class="col-md-8">
                    <div class="card-body">
                        <table class="details align-middle">
                            <tbody>
                                <tr>
                                    <td colspan="2">
                                        @if (book.BookSpecialTags != null && book.BookSpecialTags.Any())
                                        {
                                            foreach (var tag in book.BookSpecialTags)
                                            {
                                                <label class="@GetBadgeClass(tag) me-1">@tag</label>
                                            }
                                        }
                                    </td>
                                </tr>

                                <tr>
                                    <th class="text-end"> Tytuł</th>
                                    <td> @book.Title </td>
                                </tr>

                                <tr>
                                    <th class="text-end"> Autor </th>
                                    <td> @book.BookAuthor </td>
                                </tr>

                                <tr>
                                    <th class="text-end"> Rok wydania </th>
                                    <td> @book.Year </td>
                                </tr>

                                <tr>
                                    <th class="text-end"> Wydawca </th>
                                    <td> @book.BookPublisher </td>
                                </tr>

                                <tr>
                                    <th class="text-end"> Klasa </th>
                                    <td> @book.Class </td>
                                </tr>

                                <tr>
                                    <th class="text-end"> Przedmiot </th>
                                    <td> @book.Subject </td>
                                </tr>

                                <tr>
                                    <th class="text-end"> Numer ISBN </th>
                                    <td> @book.Isbn </td>
                                </tr>

                                <tr>
                                    <th class="text-end"> Liczba stron </th>
                                    <td> @book.PageCount </td>
                                </tr>

                                <tr>
                                    <th class="text-end"> Opis książki </th>
                                    <td> @book.Description </td>
                                </tr>

                                <tr>
                                    <th class="text-end"> Seria </th>
                                    <td> @book.BookSeries </td>
                                </tr>

                                <tr>
                                    <th class="text-end"> Typ </th>
                                    <td> @book.BookType </td>
                                </tr>

                                <tr>
                                    <th class="text-end"> Kategoria </th>
                                    <td> @book.BookCategory </td>
                                </tr>

                                <tr>
                                    <th class="text-end"> Gatunki </th>
                                    <td> @string.Join(", ", book.BookGenres) </td>
                                </tr>

                                <tr>
                                    <th class="text-end"> Widoczność w&nbsp;katalogu </th>
                                    <td> @(book.IsVisible ? "Tak" : "Nie")</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div>
        <div class="card-header bg-theme bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="py-2">Lista egzemplarzy (@book.CopyCount)</h2>
                </div>
            </div>
        </div>

        <div class="card-body p-4">
            <AuthorizeView Roles="@($"{Roles.ADMIN}, {Roles.LIBRARIAN}")">
                <div class="row pb-3">
                    <div class="col-12 text-end">
                        <a href="/bookslist/view/@book.Id/create?returnUrl=/bookslist/view/@book.Id" class="btn btn-lg btn-primary">
                            <i class="bi bi-journal-plus"></i> Dodaj nowy egzemplarz
                        </a>
                    </div>
                </div>
            </AuthorizeView>

            @if (book.BookCopies.Any())
            {
                int index = 1;

                <div class="table-responsive-xxl">
                    <table class="table table-striped table-bordered table-sm align-middle table-hover">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Książka</th>
                                <th scope="col">Sygnatura</th>
                                <th scope="col">Numer inwentarzowy</th>
                                <th scope="col">Dostępna</th>
                                <th scope="col">Akcje</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var copy in book.BookCopies)
                            {
                                <tr>
                                    <td>@index</td>
                                    <td>@book.Title</td>
                                    <td>@copy.Signature</td>
                                    <td>@copy.InventoryNum</td>
                                    <td>@(copy.Available ? "Tak" : "Nie")</td>
                                    <td>

                                        <div class="d-flex justify-content-start gap-2">
                                            <a href="/bookslist/view/@book.Id/edit/@copy.Id?returnUrl=/bookslist/view/@book.Id" class="btn btn-outline-primary btn-sm" title="Edytuj">
                                                <i class="bi bi-pencil-square"></i> Edytuj
                                            </a>
                                            <button class="btn btn-outline-danger btn-sm" title="Usuń">
                                                <i class="bi bi-trash3"></i> Usuń
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                index++;
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int BookId { get; set; }
    private BookGetDto book { get; set; }
    private int DeleteBookID { get; set; } = 0;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }
    private string? _directoryPath { get; set; }

    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        IsLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("applyUserPreferences");
        }
    }

    private async Task LoadData()
    {
        book = await BookRepository.GetBookByIdAsync(BookId);
    }

    private void HandleDelete(int id)
    {
        DeleteBookID = id;
        JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        await JS.InvokeVoidAsync("HideConfirmationModal");

        if (isConfirmed && DeleteBookID != 0)
        {
            var result = await BookRepository.BinBookAsync(DeleteBookID);

            if (result == null)
            {
                await JS.ToastrWarning("Nie znaleziono książki.", "Nie udało się usunąć książki.");

            }
            else
            {
                await JS.ToastrInfo("Możesz cofnąć akcję z widoku kosza.", "Książka przeniesiona do kosza.");
            }

            await LoadData();
        }
        DeleteBookID = 0;
        IsLoading = false;
    }

    private string GetBadgeClass(string tag)
    {
        return tag switch
        {
            "Polecane" => "badge bg-success",
            "Nowości" => "badge bg-warning text-dark",
            "Popularne" => "badge bg-info text-dark",
            _ => "badge bg-secondary"
        };
    }

    private void GoBack()
    {
        if (!string.IsNullOrEmpty(ReturnUrl))
            NavigationManager.NavigateTo(ReturnUrl);
        else
            NavigationManager.NavigateTo("/bookslist");
    }
}