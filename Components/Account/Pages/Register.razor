@page "/system/czytelnicy/create"
@layout ManagementLayout
@inject IJSRuntime JS

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject RoleManager<IdentityRole> RoleManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@rendermode InteractiveServer


<PageTitle>Dodaj użytkownika</PageTitle>

<div class="card-body p-4">
    <div class="row pb-3">
        <div class="col-12 text-end">
            <div class="col-12 text-start">
                <a href="/system/czytelnicy" class="btn btn-primary">
                    <i class="bi bi-arrow-bar-left"></i> Powrót
                </a>
            </div>
        </div>
    </div>

    <div class="form-custom card shadow mb-4 p-4 mx-auto">
        <div class="mb-4 px-2">
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />

                <ValidationSummary class="text-danger" role="alert" />
                <div class="row mb-3">
                    <label for="cardnumber" class="col-sm-2 col-form-label text-end">Numer karty</label>
                    <div class="col-sm-10">
                        <InputNumber id="cardnumber" @bind-Value="Input.LibraryId" class="form-control p2" aria-required="true" placeholder="10005" />
                        <ValidationMessage For="() => Input.LibraryId" class="text-danger" />
                    </div>
                </div>

                <div class="row mb-3">
                    <label for="firstname" class="col-sm-2 col-form-label text-end">Imię</label>
                    <div class="col-sm-10">
                        <InputText id="firstname" @bind-Value="Input.FirstName" class="form-control p2" aria-required="true" placeholder="Imię" />
                        <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                    </div>
                </div>

                <ValidationSummary class="text-danger" role="alert" />
                <div class="row mb-3">
                    <label for="lastname" class="col-sm-2 col-form-label text-end">Nazwisko</label>
                    <div class="col-sm-10">
                        <InputText id="lastname" @bind-Value="Input.LastName" class="form-control p2" aria-required="true" placeholder="Nazwisko" />
                        <ValidationMessage For="() => Input.LastName" class="text-danger" />
                    </div>
                </div>

                <ValidationSummary class="text-danger" role="alert" />
                <div class="row mb-3">
                    <label for="class" class="col-sm-2 col-form-label text-end">Klasa</label>
                    <div class="col-sm-10">
                        <InputText id="class" @bind-Value="Input.Class" class="form-control p2" aria-required="true" placeholder="1A" />
                        <ValidationMessage For="() => Input.Class" class="text-danger" />
                    </div>
                </div>

                <ValidationSummary class="text-danger" role="alert" />
                <div class="row mb-3">
                    <label for="email" class="col-sm-2 col-form-label text-end">E-mail</label>
                    <div class="col-sm-10">
                        <InputText id="email" @bind-Value="Input.Email" class="form-control p2" autocomplete="username" aria-required="true" placeholder="imie@test.pl" />
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                </div>


                <AuthorizeView Roles="Admin" Context="authContext">
                    <Authorized>
                        <div class="row mb-3">
                            <label for="role" class="col-sm-2 col-form-label text-end">Wybierz rolę</label>
                            <div class="col-sm-10">
                                <InputSelect @bind-Value="Input.Role" class="form-select">
                                    <option value="@Roles.USER" selected>@Roles.USER</option>
                                    <option value="@Roles.LIBRARIAN">@Roles.LIBRARIAN</option>
                                    <option value="@Roles.ADMIN">@Roles.ADMIN</option>
                                </InputSelect>
                            </div>
                        </div>
                    </Authorized>
                    <NotAuthorized></NotAuthorized>
                </AuthorizeView>

                <!--Przyciski-->
                <div class="row">
                    <div class="d-flex justify-content-between mt-3">
                        <a href="/system/czytelnicy" class="btn btn-lg btn-outline-primary">
                            <i class="bi bi-x-circle"></i> Anuluj
                        </a>

                        <button class="btn btn-lg btn-primary" type="submit">
                            <i class="bi bi-check-circle"></i> Utwórz konto
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("applyUserPreferences");
        }
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        user.UserName = Input.Email;
        user.Email = Input.Email;
        user.LibraryId = Input.LibraryId;
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.Class = Input.Class;

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, "User123!");

        if (!await RoleManager.RoleExistsAsync(Roles.USER))
        {
            await RoleManager.CreateAsync(new IdentityRole(Roles.ADMIN));
            await RoleManager.CreateAsync(new IdentityRole(Roles.LIBRARIAN));
            await RoleManager.CreateAsync(new IdentityRole(Roles.USER));
        }
        if (Input.Role is not null)
        {
            await UserManager.AddToRoleAsync(user, Input.Role);
        }
        else
        {
            await UserManager.AddToRoleAsync(user, Roles.USER);
        }

        if (result != null)
        {
            await JS.ToastrSuccess("Za chwilę nastąpi przekierowanie do poprzedniej strony", "Użytkownik dodany pomyślnie");
            await Task.Delay(5000);
            NavigationManager.NavigateTo("/system/czytelnicy");
        }
        else
        {
            await JS.ToastrError("Za chwilę nastąpi przekierowanie do poprzedniej strony", "Nie udało się dodać użytkownika.");
            await Task.Delay(5000);
            NavigationManager.NavigateTo("/system/czytelnicy");
        }

    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }


    private sealed class InputModel
    {
        [Range(10000, 99999, ErrorMessage = "Numer karty musi składać się z 5 cyfr.")]
        public int LibraryId { get; set; }

        [StringLength(100, ErrorMessage = "Imię musi mieć co najmniej 2 znaki.", MinimumLength = 2)]
        public string? FirstName { get; set; }

        [StringLength(100, ErrorMessage = "Nazwisko musi mieć co najmniej 2 znaki.", MinimumLength = 2)]
        public string? LastName { get; set; }

        [StringLength(3, ErrorMessage = "Klasa musi mieć co najmniej 2 znaki.", MinimumLength = 2)]
        public string? Class { get; set; }

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; }

        public string? Role { get; set; }
    }
}
