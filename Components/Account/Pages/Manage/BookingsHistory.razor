@page "/konto/zarzadzanie/wypozyczenia-historia"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BibliotekaSzkolnaBlazor.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger
@inject IBookLoanRepository BookLoanRepository
@inject IJSRuntime JS

<PageTitle>Historia wypożyczeń</PageTitle>

<h3>Historia wypożyczeń</h3>

@if (IsLoading)
{
    <div class="alert alert-info">Ładowanie historii wypożyczeń...</div>
}
else if (Loans == null || Loans.Count == 0)
{
    <div class="alert alert-warning">Brak historii wypożyczeń.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered table-hover table-sm text-nowrap">
            <thead>
                <tr>
                    <th>#</th>
                    <th></th>
                    <th>Tytuł</th>
                    <th>Autor</th>
                    <th>Data wypożyczenia</th>
                    <th>Data zwrotu</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Loans.Select((loan, index) => new { loan, index }))
                {
                    <tr>
                        <td>@(item.index + 1).</td>
                        <td>
                            <a href="/lektury/view/@item.loan.LoanId" class="btn btn-outline-primary btn-sm" title="Szczegóły książki">
                                <i class="bi bi-info-square"></i>
                            </a>
                        </td>
                        <td>@item.loan.Title</td>
                        <td>@item.loan.AuthorFullName</td>
                        <td>@item.loan.BorrowDate.ToString("yyyy-MM-dd")</td>
                        <td>@(item.loan.ReturnDate?.ToString("yyyy-MM-dd") ?? "-")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private List<LoanDto> Loans { get; set; } = new();

    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await LoadData(user.Id);
    }

    private async Task LoadData(string userId)
    {
        Loans = await BookLoanRepository.GetUserLoansAsync(userId);

        IsLoading = false;
        StateHasChanged();
    }
}
